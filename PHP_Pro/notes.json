[
    {
        "id": "1",
        "name": "C Programing",
        "desc": "C programming, with its rich history and enduring influence,stands as a cornerstone in the realm of computer science. Conceived by Dennis Ritchie at Bell Labs in the early 1970s, C was born out of the necessity to develop the Unix operating system. This robust and versatile programming language quickly gained popularity due to its efficiency, portability, and ease of use.Over the years, C has become the foundation for numerous other programming languages, laying the groundwork for software development across a myriad of applications, from embedded systems to large-scale enterprise solutions. Its simplicity, combined with powerful features and a comprehensive standard library, makes it a preferred choice for programmers and system developers alike. The impact of C programming extends beyond its syntax and semantics; it has played a pivotal role in shaping the modern computing landscape. C's influence can be traced in various operating systems, compilers, and programming languages, underscoring its enduring legacy. Whether you are delving into system programming, game development, or exploring the intricacies of algorithms, understanding C programming provides a solid foundation for tackling diverse challenges in the dynamic field of computer science.",
        "link": "https://drive.google.com/file/d/1WDeAMRzTlOiD1hK0eVamxckXaXpkRzlK/view?usp=sharing"
    },
    {
        "id": "2",
        "name": "Computer Networking",
        "desc":"C programming, with its rich history and enduring influence, stands as a cornerstone in the realm of computer science. Conceived by Dennis Ritchie at Bell Labs in the early 1970s, C was born out of the necessity to develop the Unix operating system. This robust and versatile programming language quickly gained popularity due to its efficiency, portability, and ease of use.Over the years, C has become the foundation for numerous other programming languages, laying the groundwork for software development across a myriad of applications, from embedded systems to large-scale enterprise solutions. Its simplicity, combined with powerful features and a comprehensive standard library, makes it a preferred choice for programmers and system developers alike. The impact of C programming extends beyond its syntax and semantics; it has played a pivotal role in shaping the modern computing landscape. C's influence can be traced in various operating systems, compilers, and programming languages, underscoring its enduring legacy. Whether you are delving into system programming, game development, or exploring the intricacies of algorithms, understanding C programming provides a solid foundation for tackling diverse challenges in the dynamic field of computer science.",
        "link":""
    },
    {
        "id": "3",
        "name": "Data Structures and Algorithms",
        "desc":"The history of the Design and Analysis of Algorithms (DSA) is deeply intertwined with the evolution of computer science as a discipline. The roots of algorithmic design can be traced back to the early days of computation when pioneers like Alan Turing and Alonzo Church laid the theoretical foundations for algorithmic thinking. The term \"algorithm\" itself finds its origins in the work of the Persian mathematician Muhammad ibn Musa al-Khwarizmi, whose name gave rise to the word. As computers became more prevalent in the mid-20th century, researchers and computer scientists began to formalize the study of algorithms. Donald Knuth's seminal work \"The Art of Computer Programming\" in the 1960s played a crucial role in shaping the field. Over the decades, DSA has continuously evolved with the advent of new computing technologies and the growing complexity of computational problems. The field has seen significant contributions from researchers such as Edsger Dijkstra, Robert Floyd, and John McCarthy. Today, DSA remains a fundamental aspect of computer science education, research, and application, continually adapting to meet the challenges posed by modern computing environments.",
        "link": "https://docs.google.com/document/d/17m"
    },
    {
        "id": "4",
        "name": "Operating System",
        "desc":"An operating system (OS) serves as the backbone of modern computing, providing a crucial layer of software that enables communication and coordination between hardware and user applications. Serving as an intermediary, the OS manages and allocates system resources, such as CPU, memory, and storage, ensuring efficient execution of processes and tasks. It facilitates a user-friendly interface, allowing users to interact with the computer system seamlessly. Operating systems come in various forms, from the widely used Windows and macOS for personal computers to Linux and Unix, which power servers and embedded systems. The evolution of operating systems has witnessed the transition from simple, single-tasking systems to sophisticated, multi-user, and multi-tasking environments. Key functions include process and memory management, file system organization, device control, and security enforcement. As technology continues to advance, operating systems adapt to new trends such as virtualization, cloud computing, and containerization, showcasing their adaptability and enduring significance in the dynamic landscape of computing.",
        "link": "https://docs.google.com/document/d/17m"
    }
]